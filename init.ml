(*

File: init.ml
Author: Brandon Hattaway

handles initializing the board and placing holes.

*)

#use "boardmanip.ml";;

(*
creates one row, which will then be cloned by init_cols to make a complete board

parameters:
n: int (board size)
list: char list

return value:
char list
*)
let rec init_rows = fun n -> fun list ->
	match n with
	0 -> list
	|	n -> init_rows (n-1) (' '::list)
;;

(*
clones a row n times in order to make a complete board

parameters:
n: int (board size)
list: char list (one row, generated by init_rows)
acc: char list list (board)

return value:
char list list (a board)
*)
let rec init_cols = fun n -> fun list -> fun acc ->
	match n with
	0 -> acc
	|	n -> init_cols (n-1) list (list::acc)
;;

(*
creates an nxn board, with each location being a space ' '

parameters:
n: int (board size)

return value:
char list list (a board)
*)
let init_board = fun n ->
	init_cols n (init_rows n []) []
;;

(*
parameters:
board: char list list
list: int list (contains the pairs of holes)

return value:
char list list (a board)
*)
let rec add_holes = fun board -> fun list ->
	match list with
	[] -> board
	(* don't do anything if there are only 0 or 1 values in the list *)
	|	x::[] -> board
	(* there should be at least two values in the list, a row and col *)
	|	row::col::xs -> add_holes (place_piece board row col '@' []) xs
;;

(*
parameters:
list: int list (should accept an empty list at first)

return value:
int list (filled with row,col pairs, each pair signifying a hole)
*)
let rec get_ints = fun list ->
	let x = read_int () in
	if x = -1 then
		list
	else
		get_ints (list@[x])
;;
